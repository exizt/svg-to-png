<!doctype html>
<html lang="ko">
<head>
<meta charset="utf-8">
<title>(Dev) Svg to Png</title>
<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.0.0-beta1/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-giJF6kkoqNQ00vy+HMDP7azOuL0xtbfIcaT9wjKHr8RbDVddVHyTfAAsrekwKmP1" crossorigin="anonymous">
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.0.0-beta1/dist/js/bootstrap.bundle.min.js" integrity="sha384-ygbV9kiqUc6oa4msXn9868pTtWMgiQaeYH7/t7LECLbyPA2x65Kgf80OJFdroafW" crossorigin="anonymous"></script>
<script src="./config.json.js"></script>
<script src="./sample.json.js"></script>
<style>
canvas {
	border:1px solid #eee;
}
.wrap-canvas {
	margin: 2rem;
	display:inline-block;
	text-align: center;
}
</style>
</head>
<body>
	<div class="container">
		<div class="text-end">
			<div class="form-check form-check-inline form-switch">
				<input class="form-check-input" type="checkbox" id="reverseHtmlBg">
				<label class="form-check-label" for="reverseHtmlBg" id="reverseHtmlBgLabel">HTML 배경 반전</label>
			</div>
		</div>
		<div class="card">
			<div class="card-body">
				<div class="mb-3">
					<label for="presets">Preset 선택</label>
					<select class="form-control" id="presets">
					  <option></option>
					</select>
				</div>
				<div class="mb-3">
					<button type="button" class="btn btn-primary" onclick="downloadPng()">PNG 다운로드</button>
					<button type="button" class="btn btn-outline-primary" onclick="redraw()">재생성</button>
				</div>
			</div>
		  </div>
	</div>
	<div id="canvas-container"></div>
	<div id="png-container"></div>
</body>
<script>
	// 글로벌 변수들
	var presetId = "";
	var presets = {};

	// 가운데 적용할 svg
	var foregroundSvg = "";
	
	// 배경에 적용할 svg
	var backgroundSvg = ""

	// 변환할 사이즈 종류
	var sizes = [];

	var filenameRule = '';

	var protocol = location.protocol

	// 구현부
	document.addEventListener('DOMContentLoaded', function() {
		//loadConfigWithDraw("config.json")
		if(typeof config === "undefined"){
			loadPresetWithDraw(sample)
		} else {
			loadPresetWithDraw(config)
		}

		document.getElementById("reverseHtmlBg").addEventListener("click",(evt)=>{
			var el = evt.target
			document.body.style.backgroundColor = (el.checked) ? "black" : ""
			document.getElementById("reverseHtmlBgLabel").style.color = (el.checked) ? "white" : ""
		})
	});

	/**
	 * [deprecated]
	 * config 로드 및 png draw 호출
	 * json 을 ajax 로 사용하던 걸 그냥 .js 로 변경했으므로 이 함수는 사용되지 않음...
	 */
	function loadConfigWithDraw(jsonUri){
		fetch(jsonUri)
		.then(response => {
			if (response.status >= 200 && response.status <= 299) {
				return response.json()
			} else if(response.status === 404){
				if(jsonUri != "sample.json")
					loadConfigWithDraw("sample.json")
				throw Error(response.statusText)
			} else {
				throw Error(response.statusText)
			}
		})
		.then(json => {
			loadPresetWithDraw(json)
		})
		.catch(error => {
			console.log(error)
		});
	}

	/**
	 * presets를 셋팅하고 canvas를 draw함.
	 */
	function loadPresetWithDraw(json){
		//console.log(json)
		presets = json

		// 목록 셋팅 및 이벤트 셋팅
		initPresetsView()

		// 첫번째 항목을 선택 및 드로우
		presetId = Object.keys(presets)[0]
		createWithDrawCanvas();
	}

	/**
	 * presets 목록 select box 셋팅
	 */
	function initPresetsView(){
		var selPresets = document.getElementById("presets")
		selPresets.innerHTML = ""

		var html = ""
		for(key in presets) {
			html += `<option value="${key}">${presets[key].name} [${key}]</option>`
		}
		selPresets.innerHTML = html

		document.getElementById("presets").addEventListener("change", function(evt){
			//console.log(evt.target.value)
			presetId = evt.target.value
			createWithDrawCanvas()
		})
	}

	/**
	* Canvas를 생성하고 drawing을 하는 메서드
	*/
	function createWithDrawCanvas(){
		// 프리셋에서 지정한 걸로 대체
		var preset = presets[presetId];
		foregroundSvg = preset.foregroundSvg;
		backgroundSvg = preset.backgroundSvg;
		sizes = preset.sizes;
		filenameRule = preset.filename;

		createCanvasElements();
		
		var canvasList = document.getElementsByTagName('canvas');
		for (var i = 0; i < canvasList.length; i++) {
			drawCanvas2(canvasList[i]);

		}
	}

	/**
	* 설정된 size별로 canvas를 여러개 생성함.
	*/
	function createCanvasElements(){
		
		var container = document.getElementById('canvas-container');
		container.innerHTML = ""

		for(var i in sizes){
			createCanvas(sizes[i])
		}
	}

	/**
	* Canvas를 생성하는 메서드
	*/
	function createCanvas(size){
		var container = document.getElementById('canvas-container');

		let html = `<div class="wrap-canvas"><canvas id="canvas-${size}" width="${size}" height="${size}"></canvas><br>${size}px</div>`;
		container.insertAdjacentHTML('beforeend',html);
	}

	/**
	* svg를 canvas에 그리는 메서드.
	*/
	function drawCanvas2(canvas)
	{
		var ctx = canvas.getContext("2d");

		if(backgroundSvg == null){
			//console.log("only foreground")
			// 내용만 드로잉
			drawForeground()
		} else {
			//console.log("background with foreground")			
			// 배경 드로잉 후 내용 드로잉
			var bg = new Image()
			bg.src = backgroundSvg;
			bg.onload = function() {
				//ctx.fillStyle = "orange";
				//ctx.drawImage(img, 0, 0, 128, 128);
				ctx.drawImage(bg, 0, 0, canvas.width, canvas.height);
				//var png = canvas.toDataURL("image/png");
				//document.querySelector(pngContainerSelector).innerHTML = '<img src="'+png+'"/>';
				//DOMURL.revokeObjectURL(png);
	
				drawForeground()
			};
		}
				

		function drawForeground(){
			var foreground = new Image();
			foreground.src = foregroundSvg;
			foreground.onload = function() {
				//ctx.fillStyle = "orange";
				//ctx.drawImage(img, 0, 0, 128, 128);
				ctx.drawImage(foreground, 0, 0, canvas.width, canvas.height);
				//var png = canvas.toDataURL("image/png");
				//document.querySelector(pngContainerSelector).innerHTML = '<img src="'+png+'"/>';
				//DOMURL.revokeObjectURL(png);
			};
		}
	}

	function redraw(){
		createWithDrawCanvas()
	}

	/**
	* 다운로드 메서드
	* 생성되어있는 canvas를 탐색해서 png로 다운로드 받는다.
	*/
	function downloadPng(){
		if(protocol == "file:"){
			alert("웹 서버에서 동작된 경우에만 PNG 일괄 다운로드가 가능합니다 (브라우저 권한 이슈")
			return
		}

		var canvasList = document.getElementsByTagName('canvas');
		for (var i = 0; i < canvasList.length; i++) {
			download(canvasList[i].id, canvasList[i].width)
		}
		function download(canvasId, size){
			
			var link = document.createElement('a');
			//var filename = canvasId+'.png';
			//var filename = `canvas-${size}`+'.png';
			var filename = filenameRule.formatUnicorn({"size":size})
			link.download = filename
			//console.log(filename)
			link.href = document.getElementById(canvasId).toDataURL("image/png")
			link.click();
			
		}
	}

	/**
	 * https://gist.github.com/richardblondet/9a23a155e6a784f1ff2cbd8d84accd72
	 */
	String.prototype.formatUnicorn = String.prototype.formatUnicorn || function () {
		"use strict";
		var str = this.toString();
		if (arguments.length) {
			var t = typeof arguments[0];
			var key;
			var args = ("string" === t || "number" === t) ?
				Array.prototype.slice.call(arguments)
				: arguments[0];

			for (key in args) {
				str = str.replace(new RegExp("\\{" + key + "\\}", "gi"), args[key]);
			}
		}

		return str;
	};
</script>
</html>